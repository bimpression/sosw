AWSTemplateFormatVersion: "2010-09-09"
Description: "sosw_scavenger"

Parameters:
  ExecutionPolicy:
    Description: "Managed execution policy for sosw lambdas."
    Type: String
    Default: 'AWSLambdaBasicExecutionRole'

  ConfigTableName:
    Description: "Config Table."
    Type: String
    Default: 'config'

Resources:

  LambdaSoswScavengerRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - "lambda.amazonaws.com"
          Action:
          - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - !Sub "arn:aws:iam::aws:policy/service-role/${ExecutionPolicy}"

      Policies:
      - PolicyName: "SoswScavengerPermissions"
        PolicyDocument:
          Version: "2012-10-17"
          Statement:

          - Effect: "Allow"
            Action: "dynamodb:*"
            Resource:
#              - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}/table/${Fn::ImportValue: 'sosw-ddb-tasks'}/*"
              - Fn::Join:
                - ':'
                - - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}"
                  - Fn::Join:
                    - '/'
                    - - "table"
                      - Fn::ImportValue: "sosw-ddb-tasks"
                      - "*"
              - Fn::Join:
                - ':'
                - - "arn:aws:dynamodb"
                  - !Ref AWS::Region
                  - !Ref AWS::AccountId
                  - Fn::Join:
                    - '/'
                    - - "table"
                      - Fn::ImportValue: "sosw-ddb-tasks"

# Closed tasks table and indexes
          - Effect: "Allow"
            Action:
            - "dynamodb:*"
            Resource:
              - Fn::Join:
                - ':'
                - - "arn:aws:dynamodb"
                  - !Ref AWS::Region
                  - !Ref AWS::AccountId
                  - Fn::Join:
                    - '/'
                    - - "table"
                      - Fn::ImportValue: "sosw-ddb-tasks-closed"
                      - "index"
                      - "*"
              - Fn::Join:
                - ':'
                - - "arn:aws:dynamodb"
                  - !Ref AWS::Region
                  - !Ref AWS::AccountId
                  - Fn::Join:
                    - '/'
                    - - "table"
                      - Fn::ImportValue: "sosw-ddb-tasks-closed"

# Retry tasks table
          - Effect: "Allow"
            Action:
            - "dynamodb:*"
            Resource:
              - Fn::Join:
                - ':'
                - - "arn:aws:dynamodb"
                  - !Ref AWS::Region
                  - !Ref AWS::AccountId
                  - Fn::Join:
                    - '/'
                    - - "table"
                      - Fn::ImportValue: "sosw-ddb-tasks-retry"
                      - "index"
                      - "*"
              - Fn::Join:
                - ':'
                - - "arn:aws:dynamodb"
                  - !Ref AWS::Region
                  - !Ref AWS::AccountId
                  - Fn::Join:
                    - '/'
                    - - "table"
                      - Fn::ImportValue: "sosw-ddb-tasks-retry"

# CloudWatch metrics required for Ecology Client
          - Effect: "Allow"
            Action: "cloudwatch:GetMetric*"
            Resource: "*"

# Get Lambda settings required for Ecology Client
          - Effect: "Allow"
            Action: "lambda:Get*"
            Resource:
              - Fn::Join:
                  - ':'
                  - - "arn:aws:lambda"
                    - !Ref AWS::Region
                    - !Ref AWS::AccountId
                    - 'function'
                    - '*'

# You can provide access explicitly here, but we normally recommend keeping it in the Custom policy of ConfigTable.
# See examples/yaml/sosw-shared-dynamodb.yaml
          - Effect: "Allow"
            Action:
              - "dynamodb:Query"
              - "dynamodb:DescribeTable"
            Resource:
              - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${ConfigTableName}"

      RoleName: "lambda_sosw_scavenger"


#################################
# Lambda Function for Essential #
#################################
  LambdaSoswScavenger:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Sub "sosw-s3-${AWS::AccountId}"
        S3Key: "sosw/packages/sosw_scavenger.zip"
      Description: "ABS. CloudFormation managed sosw Scavenger."
      FunctionName: "sosw_scavenger"
      Handler: "app.lambda_handler"
      MemorySize: 256
      Role: !GetAtt LambdaSoswScavengerRole.Arn
      Runtime: "python3.7"
      Timeout: 60

      Tags:
       -
         Key: 'Environment'
         Value: 'dev'


##############################################
# Permissions for CloudWatch ScheduledEvents #
# The actual Rules are configured in the     #
# scheduled-rules.yaml template.             #
##############################################
  PermissionForEventsToInvokeLambdaSoswScavenger:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName:
        Ref: "LambdaSoswScavenger"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"


#############################################
# Export Values to CloudFormation Namespace #
#############################################
Outputs:

  LambdaSoswScavenger:
    Description: "Sosw Scavenger Essential"
    Value: !GetAtt LambdaSoswScavenger.Arn
    Export:
      Name: "sosw-lambda-scavenger"
